<script>
	function updateDT() {
		var now = new Date();
		var milliseconds = now.getMilliseconds().toString().slice(0, 2);
		if(milliseconds.length < 2) { 
			milliseconds = '0'+milliseconds;
			}
		var seconds = now.getSeconds().toString();
		if(seconds.length < 2) {
			seconds = '0'+seconds;
		}
		var minutes = now.getMinutes().toString();
		if(minutes.length < 2) {
			minutes = '0'+minutes;
		}
		var hours = now.getHours().toString();
		if(hours.length < 2) {
			hours = '0'+hours;
		}
		time =  hours + ':' + minutes + ':' + seconds + ':' + milliseconds;

		var dd = now.getDate();
		var monthNames = ["January", "February", "March", "April", "May", "June",
  		"July", "August", "September", "October", "November", "December"];
		var yyyy = now.getFullYear();
		var mm = monthNames[now.getMonth()];
		if(dd<10) {
		    dd='0'+dd
		} 
		date = dd + ' ' + mm + ' ' + yyyy;
 
		document.getElementById('time').innerHTML = time;
		document.getElementById('date').innerHTML = date;
	}
	setInterval(updateDT, 100);
	
	

</script>

	<!-- <h1>Home page</h1> -->

	<div class="container-fluid test"> 
		<div class="row-fluid"> 
		    <div class="col-md-7 test"> <!-- left side -->
		    	<div class="row-fluid">
			    	<div class="col-md-6 test"> <!-- trello -->
			    		trello
			    	</div> 
			    	<div class="col-md-6 test"> <!-- google stuff -->
			    		<div class="row-fluid"> 
			    			<div class="col-md-12 test"> <!-- gmail -->
			    				<h3>Inbox</h3>
			    				<ul class="inbox">
			    					
			    				</ul>
			    			</div>
			    		</div>
			    		<div class="row-fluid"> 
			    			<div class="col-md-12 test"> <!-- google calendar -->
			    				<h3>Events</h3>
			    				<ul id="cal">
			    					
			    				</ul>
			    			</div>
			    		</div>
			    	</div> <!-- END google stuff -->
			    </div>
			    <div class="row-fluid">
			    	<div class="col-md-12 test"> <!-- stocks -->
			    		<h3>S&amp;P 500 (^GSPC)</h3>
							<canvas id="myChart" width="400" height="100"></canvas>

			    	</div> 
			    </div>
		    </div> <!-- END left side --> 
		    <div class="col-md-5 test"> <!-- right side -->
		    	<div class="row-fluid"> 
			    			<div class="col-md-12 test headlines"> <!-- news -->
			    				<h3>Headlines</h3>
			    				<ul>
			    				<% @headlines['results'].each do |r| %>
			    					<li><%= r['title'] %></li>
			    				<% end %>
			    				</ul>
			    			</div>
			    </div>
			    <div class="row-fluid"> 
			    			<div class="col-md-12 test weather"> <!-- weather -->
			    				<!--<h3>Current Weather</h3>-->
			    				<div class="col-md-4">
			    					
				    				<span class="temperature"><%= @weather["currently"]["temperature"].round %>&deg;</span>
				    				<div>
				    					<span class="summary">
				    						<%= @weather["currently"]["summary"] %>
				    					</span>
				    				</div>
			    				</div>
			    				<div class="col-md-8">
			    					<div class="col-md-5 icon">
			    						<canvas id="icon1" width="128" height="128"></canvas>
			    					</div>
			    					<div class="col-md-7 highLow">
			    						High of 
			    						<%= @weather["daily"]["data"][0]["temperatureMax"].round %>&deg;
			    						<br>
			    						Low of 
			    						<%= @weather["daily"]["data"][0]["temperatureMin"].round %>&deg;
			    						<br>
			    						<%= @weather["daily"]["data"][0]["precipProbability"].round %>%
			    						chance of rain
			    					</div>
			    				</div>
			    			</div>
			    </div>
			    <div class="row-fluid"> 
			    			<div class="col-md-12 test" id="date"> <!-- date -->
			    				date
			    			</div>
			    </div>
			    <div class="row-fluid"> 
			    			<div class="col-md-12 test" id="time"> <!-- time -->
			    				time
			    			</div>
			    </div>
		    </div> <!-- END right side -->

		</div> 
	</div> <!-- END container-fluid -->




	</div> <!-- end container-fluid*/ -->


    <button id="authorize-button" style="visibility: hidden">Authorize</button>
    <script type="text/javascript">

      var clientId = '38849404657-0hhqg5p0404aqm3d3l4cerpps68rlnej.apps.googleusercontent.com';

      var apiKey = 'AIzaSyDiuIYTIbNUJ2taMFtGFxYQVH7zLXJaQnI';

      var scopes = 'https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/calendar.readonly';
      function handleClientLoad() {
        gapi.client.setApiKey(apiKey);
        window.setTimeout(checkAuth, 1);
      }
      function checkAuth() {
        gapi.auth.authorize({
          client_id: clientId,
          scope: scopes,
          immediate: true
        }, handleAuthResult);
      }
      function handleAuthClick() {
        gapi.auth.authorize({
          client_id: clientId,
          scope: scopes,
          immediate: false
        }, handleAuthResult);
        return false;
      }
      function handleAuthResult(authResult) {
        if(authResult && !authResult.error) {
          loadGmailApi();
          loadCalApi();
          $('#authorize-button').remove();
          // $('.table-inbox').removeClass("hidden");
        } else {
        	console.log('show button');
          $('#authorize-button').css('visibility', 'visible');;
          $('#authorize-button').on('click', function(){
            handleAuthClick();
          });
        }
      }
      function loadGmailApi() {
        gapi.client.load('gmail', 'v1', displayInbox);
      }
      function displayInbox() {
        var request = gapi.client.gmail.users.messages.list({
          'userId': 'me',
          'labelIds': 'INBOX',
          'maxResults': 5
        });
        request.execute(function(response) {
          $.each(response.messages, function() {
            var messageRequest = gapi.client.gmail.users.messages.get({
              'userId': 'me',
              'id': this.id
            });
            messageRequest.execute(appendMessageRow);
          });
        });
      }
      function appendMessageRow(message) {
        $('.inbox').append(
          '<li>\
            '+getHeader(message.payload.headers, 'From')+
            ' - ' +
                getHeader(message.payload.headers, 'Subject') +
              ' - '
              	+getHeader(message.payload.headers, 'Date')+
          '</li>'
        );
      }
      function getHeader(headers, index) {
        var header = '';
        $.each(headers, function(){
          if(this.name === index){
            header = this.value;
          }
        });
        return header;
      }

      function loadCalApi() {
      	console.log('loading cal');
				gapi.client.load('calendar', 'v3', listUpcomingEvents);
      }
      function listUpcomingEvents() {
      	var endDate = new Date(); 
      	endDate.setDate(endDate.getDate() + 7);
        var request = gapi.client.calendar.events.list({
          'calendarId': 'primary',
          'timeMin': (new Date()).toISOString(),
          'timeMax': endDate.toISOString(),
          'showDeleted': false,
          'singleEvents': true,
          'maxResults': 7,
          'orderBy': 'startTime'
        });

        request.execute(function(resp) {
          var events = resp.items;

          if (events.length > 0) {
            for (i = 0; i < events.length; i++) {
              var event = events[i];
              var when = event.start.dateTime;
              if (!when) {
                when = event.start.date;
              }
              $('#cal').append('<li>' + event.summary + ' (' + when + ')' + '</li>');
            }
          } else {
            $('#cal').append('<li>No events found</li>');
          }

        });
      }

      // function appendCal(message) {
      //   var cal = document.getElementById('cal');
      //   var textContent = '<li>' + message + '</li>';
      //   cal.appendChild(textContent);
      // }




    </script>

    <script src="https://apis.google.com/js/client.js?onload=handleClientLoad"></script>


<script>




  $.getJSON('/chart.json', function(data) {
    console.log(data);
    var options = {};
    var ctx = document.getElementById("myChart").getContext("2d");
    var myLineChart = new Chart(ctx).Line(data, {responsive: true,
      bezierCurve : false
     });
  });

  $(document).ready(function() {
		var skycons = new Skycons({"color": "rgb(130,189,192)"});
		var icon = '<%= @weather["currently"]["icon"]%>';
		var icon = icon.toUpperCase().split('-').join("_");
	  skycons.add("icon1", Skycons[icon]);
		skycons.play();
  });


</script>